	#2024 必须依赖lua_core.conf
    server {
        listen       12020;
        server_name  127.0.0.1;
        server_name_in_redirect off;
        #charset koi8-r;
        #access_log  logs/test.access.log  main;

        resolver 114.114.114.114;#添加DNS解析，按当地实际进行配置
        
        # access_by_lua_block  { #方案可行
        #         -- 调用 Lua 脚本并传递参数
        #         -- 方式1 OK
        #         local limit_conn = require "idaas.idToken_test"              
        #         limit_conn.incoming({})                
        # }
        # rewrite_by_lua_file /lualib/idaas/idToken_test.lua; #方案可行
        access_by_lua_file /lualib/idaas/idToken_test.lua;  #方案可行
		location / {
			proxy_pass http://127.0.0.1:702/; #代理地址
            # 下面的代码 按需使用
            #more_set_headers 'Access-Control-Allow-Origin:*';
			#more_set_headers 'Access-Control-Allow-Credentials:true';
			# proxy_set_header   X-Host    $host;
			# proxy_set_header   Host    "www.xxx.com";
			proxy_set_header   X-Real-IP   $remote_addr;   
			proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            #proxy_http_version 1.1;
            #proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection "upgrade";
        }
    } 
    # 用于测试 去除 id_token  ,测试OK
    server {
        listen       12021;
        server_name  127.0.0.1;
        server_name_in_redirect off;
        # access_log  logs/test.access.log  main;
         
        access_by_lua_file /lualib/idaas/idToken_remove.lua;#方案可行
        location / {
            # 会导致无限301
            # if ($args ~* (.*)(?<=^|&)id_token=[^&]*(?=$|&)(.*)) {
            #     set $args $1$3;
            #     rewrite ^(.*)$ $uri?$args? permanent;
            #     break;
                
            # }
			proxy_pass http://127.0.0.1:702/; #代理地址		
        }
    }
